<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="../static/css/mapBackend.css" />
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <div class="map_wrap">
      <div
        id="map"
        style="width: 100%; height: 100%; position: relative; overflow: hidden"
      ></div>
      <ul id="category">
        <li id="FD6" data-order="0">
          <!-- SB: 카테고리 아이콘을 결정하는 클래스입니다. ex) cafe, store -->
          <span class="category_bg cafe"></span>
          음식점
        </li>
        <li id="CS2" data-order="1">
          <span class="category_bg store"></span>
          편의점
        </li>
        <li id="CE7" data-order="2">
          <span class="category_bg cafe"></span>
          카페
        </li>
        <li id="MT1" data-order="3">
          <span class="category_bg mart"></span>
          마트
        </li>
        <li id="PM9" data-order="4">
          <span class="category_bg pharmacy"></span>
          약국
        </li>
      </ul>
    </div>

    <!-- SB: 리뷰작성 버튼과 작성된 리뷰를 보여주는 div입니다. -->
    <div id="messageDiv" style="background-color: pink"></div>
    <!-- SB: 리뷰작성 버튼을 누르면 작성칸을 보여주는 div입니다.-->
    <form name="reviewForm">
      <div id="reviewDiv" style="background-color: skyblue"></div>
    </form>
    <form name="reviewFixForm">
      <div id="fixDiv" style="background-color: lightgreen"></div>
    </form>

    <script
      type="text/javascript"
      src="//dapi.kakao.com/v2/maps/sdk.js?appkey=a54c1412f5e82ee9e5256c32dc403b24&libraries=services"
    ></script>
    <script>
            // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다
            var placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}),
                contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다
                markers = [], // 마커를 담을 배열입니다
                currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다

            var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                mapOption = {
                    center: new kakao.maps.LatLng(37.53368846953789, 126.96331420297767), // 지도의 중심좌표
                    level: 4 // 지도의 확대 레벨
                };

            // 지도를 생성합니다
            var map = new kakao.maps.Map(mapContainer, mapOption);

            // 장소 검색 객체를 생성합니다
            var ps = new kakao.maps.services.Places(map);

            // 지도에 idle 이벤트를 등록합니다
            kakao.maps.event.addListener(map, 'idle', searchPlaces);

            // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다
            contentNode.className = 'placeinfo_wrap';

            // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때
            // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다
            addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);
            addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);

            // 커스텀 오버레이 컨텐츠를 설정합니다
            placeOverlay.setContent(contentNode);

            // 각 카테고리에 클릭 이벤트를 등록합니다
            addCategoryClickEvent();

            // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다
            function addEventHandle(target, type, callback) {
                if (target.addEventListener) {
                    target.addEventListener(type, callback);
                } else {
                    target.attachEvent('on' + type, callback);
                };
            };

            // 카테고리 검색을 요청하는 함수입니다
            function searchPlaces() {
                if (!currCategory) {
                    return;
                }
                // 커스텀 오버레이를 숨깁니다
                placeOverlay.setMap(null);

                // 지도에 표시되고 있는 마커를 제거합니다
                removeMarker();

                ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true});
            }

            // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
            function placesSearchCB(data, status, pagination) {
                if (status === kakao.maps.services.Status.OK) {

                    // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다
                    displayPlaces(data);
                } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
                    // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요

                } else if (status === kakao.maps.services.Status.ERROR) {
                    // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요

                }
            }



            // SB: 리뷰 작성 버튼에 걸려있는 함수입니다. input 태그들을 보여줍니다.
            function postReview(placeName, placeAddress) {
                const reviewDiv = document.getElementById("reviewDiv");
                const reviewContent = `
                    상호명 <input type="text" name="placeName" value='${placeName}' disabled>
                    <br />
                    주소 <input type="text" name="placeName" value='${placeAddress}' disabled>
                    <br />
                    별점 <input type="number" name="rating">
                    <br />
                    리뷰를 작성해주세요! <input type="text" name="reviewComment">
                    <br />
                    <button type="button" onclick="uplodeReview('${placeName}', '${placeAddress}')">제출하기!</button>`;
                reviewDiv.innerHTML = reviewContent;
            };

            // SB: 리뷰 제출 버튼(제출하기!!)에 걸려있는 함수입니다.
            function uplodeReview(placeName, placeAddress) {
                const form = document.forms["reviewForm"];
                const data = {
                    id: 1,
                    storeID: `${placeName}_${placeAddress}`,
                    rating: form.rating.value,
                    reviewComment: form.reviewComment.value
                };
                axios({
                    method: "POST",
                    url: "/uplodeReview",
                    data: data
                }).then((res)=> {
                    alert("리뷰 작성이 완료되었습니다.")
                    console.log(res.data)
                    $('#messageDiv').append(
                        `<div id="${res.data.reviewNumber}">
                            <div>작성일 : ${res.data.createdAt}</div>
                            <div>수정일 : ${res.data.updatedAt}</div>
                            <div id="ratingDiv">별점 : ${res.data.rating}</div>
                            <div id="reviewCommentDiv">내용 : ${res.data.reviewComment}</div>
                            <button type="button" onclick="reviewFix('${res.data.reviewNumber}', '${res.data.rating}', '${res.data.reviewComment}')">리뷰 수정</button>
                            <button type="button" onclick="reviewDelete('${res.data}')">리뷰 삭제</button>
                        </div>`
                    )
                    reviewDiv.innerHTML = ""
                })
            }

            // SB: 리뷰 수정 버튼에 걸려있는 함수입니다.
            function reviewFix(reviewNumber, rating, reviewComment) {
                $('#fixDiv').append(
                        `<div>
                            별점 <input type="number" name="rating" value="${rating}">
                            <br />
                            원하시는대로 수정하시면 됩니다ㅋ <input type="text" name="reviewComment" value="${reviewComment}">
                            <br />
                            <button type="button" onclick="updateReview('${reviewNumber}')">수정하기!</button>
                        </div>`
                    )
            }

            // SB: 수정하기 버튼에 걸려있는 함수입니다.
            function updateReview(reviewNumber) {
                const form = document.forms["reviewFixForm"];
                const data = {
                    reviewNumber: reviewNumber,
                    rating: form.rating.value,
                    reviewComment: form.reviewComment.value
                };
                axios({
                    method: "patch",
                    url: "/updateReview",
                    data: data
                }).then((res)=> {
                    alert("리뷰 수정이 완료되었습니다.")
                    fixDiv.innerHTML = ""
                    console.log("여기 확인하세요: ", res.data)
                    $(`#${res.data.reviewNumber}`).empty();
                    $(`#${res.data.reviewNumber}`).append(
                        `<div>작성일 : ${res.data.createdAt}</div>
                            <div>수정일 : ${res.data.updatedAt}</div>
                            <div id="ratingDiv">

                                : ${res.data.rating}</div>
                            <div id="reviewCommentDiv">내용 : ${res.data.reviewComment}</div>
                            <button type="button" onclick="reviewFix('${res.data.reviewNumber}', '${res.data.rating}', '${res.data.reviewComment}')">리뷰 수정</button>
                            <button type="button" onclick="reviewDelete('${res.data.reviewNumber}')">리뷰 삭제</button>`
                    );
                });
            };

            // SB: 리뷰 삭제 버튼에 걸려있는 함수입니다.
            function reviewDelete(reviewNumber) {
                axios({
                    method: "delete",
                    url: `/reviewDelete/${reviewNumber}`
                }).then((res)=> {
                    const thisReviewDiv = document.getElementById(`${reviewNumber}`);
                    thisReviewDiv.innerHTML = ""
                    alert(res.data)
                })
            };


            // 지도에 마커를 표출하는 함수입니다
            function displayPlaces(places) {

                // 몇번째 카테고리가 선택되어 있는지 얻어옵니다
                // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다
                var order = document.getElementById(currCategory).getAttribute('data-order');

                for ( var i=0; i<places.length; i++ ) {

                        // 마커를 생성하고 지도에 표시합니다
                        var marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), order);

                        // 마커와 검색결과 항목을 클릭 했을 때
                        // 장소정보를 표출하도록 클릭 이벤트를 등록합니다
                        (function(marker, place) {
                            kakao.maps.event.addListener(marker, 'click', function() {
                                displayPlaceInfo(place);



                                // SB: 마커를 클릭하면 다른 리뷰 작성칸을 지우는 함수입니다.
                                if (reviewDiv.innerHTML.indexOf(`${place.place_name}`) != -1) {
                                } else {
                                    reviewDiv.innerHTML = ""
                                }

                                // SB: 마커를 클릭하면 가게 정보를 DB에 올리는 함수입니다.
                                let storeData = {
                                    storeID: `${place.place_name}_${place.address_name}`,
                                    placeName : place.place_name,
                                    address: place.address_name
                                };
                                axios({
                                    method: "POST",
                                    url: "/uploadStore",
                                    data: storeData
                                }).then((res)=> {
                                    console.log(res.data);
                                });

                                // SB: 마커를 클릭하면 리뷰정보를 가져오는 함수입니다.
                                let getReviewData = {
                                    storeID: `${place.place_name}_${place.address_name}`
                                };

                                axios({
                                    method: "get",
                                    url: "/getReview",
                                    params: getReviewData
                                }).then((res)=> {
                                    if (res.data) {
                                        document.getElementById("messageDiv").innerHTML =
                                            `<h3>${place.place_name}</h3>
                                            <button type="button" onclick="postReview('${place.place_name}', '${place.address_name}')">나도 리뷰 작성 해볼까</button>`

                                        for (let i = 0; i < res.data.length; i++) {
                                            $('#messageDiv').append(
                                                `<div id="${res.data[i].reviewNumber}">
                                                    <div>작성일 : ${res.data[i].createdAt}</div>
                                                    <div>수정일 : ${res.data[i].updatedAt}</div>
                                                    <div id="ratingDiv">별점 : ${res.data[i].rating}</div>
                                                    <div id="reviewCommentDiv">내용 : ${res.data[i].reviewComment}</div>
                                                    <button type="button" onclick="reviewFix('${res.data[i].reviewNumber}', '${res.data[i].rating}', '${res.data[i].reviewComment}')">리뷰 수정</button>
                                                    <button type="button" onclick="reviewDelete('${res.data[i].reviewNumber}')">리뷰 삭제</button>
                                                </div>`
                                            )
                                        }
                                    }
                                    else {
                                        document.getElementById("messageDiv").innerHTML =
                                            `<h3>${place.place_name}</h3>
                                            <button type="button" onclick="postReview('${place.place_name}', '${place.address_name}')">내 리뷰가 첫 리뷰라니!</button>
                                            <div>작성된 리뷰가 없습니다ㅠㅠ</div>`
                                    }
                                });
                            });
                        })(marker, places[i]);
                };
            };



            // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
            function addMarker(position, order) {
                // SB: 마커 이미지는 여기서 바꿔야할 것 같습니다.
                var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
                    imageSize = new kakao.maps.Size(27, 28),  // 마커 이미지의 크기
                    imgOptions =  {
                        spriteSize : new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기
                        spriteOrigin : new kakao.maps.Point(46, (order*36)), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
                        offset: new kakao.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
                    },
                    markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                        marker = new kakao.maps.Marker({
                        position: position, // 마커의 위치
                        image: markerImage
                    });

                marker.setMap(map); // 지도 위에 마커를 표출합니다
                markers.push(marker);  // 배열에 생성된 마커를 추가합니다

                return marker;
            }

            // 지도 위에 표시되고 있는 마커를 모두 제거합니다
            function removeMarker() {
                for ( var i = 0; i < markers.length; i++ ) {
                    markers[i].setMap(null);
                }
                markers = [];
            }

            // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다
            function displayPlaceInfo (place) {
                var content = '<div class="placeinfo">' +
                                '<a class="title" href="' + place.place_url + '" target="_blank" title="' + place.place_name + '">' + place.place_name + '</a>';

                if (place.road_address_name) {
                    content += '    <span title="' + place.road_address_name + '">' + place.road_address_name + '</span>' +
                                '  <span class="jibun" title="' + place.address_name + '">(지번 : ' + place.address_name + ')</span>';
                }  else {
                    content += '    <span title="' + place.address_name + '">' + place.address_name + '</span>';
                }

                content += '    <span class="tel">' + place.phone + '</span>' +
                            '</div>' +
                            '<div class="after"></div>';

                contentNode.innerHTML = content;
                placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));
                placeOverlay.setMap(map);
            }


            // 각 카테고리에 클릭 이벤트를 등록합니다
            function addCategoryClickEvent() {
                var category = document.getElementById('category'),
                    children = category.children;

                for (var i=0; i<children.length; i++) {
                    children[i].onclick = onClickCategory;
                };
            };

            // 카테고리를 클릭했을 때 호출되는 함수입니다
            function onClickCategory() {
                var id = this.id,
                    className = this.className;

                placeOverlay.setMap(null);

                if (className === 'on') {
                    currCategory = '';
                    changeCategoryClass();
                    removeMarker();
                } else {
                  document.getElementById(
                    "messageDiv"
                  ).innerHTML = `<button type="button" onclick="postReview('${place.place_name}', '${place.address_name}')">내 리뷰가 첫 리뷰라니!</button>
                                            <div>작성된 리뷰가 없습니다ㅠㅠ</div>`;
                }
              });
            });
          })(marker, places[i]);
        }
      }

      // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
      function addMarker(position, order) {
        // SB: 마커 이미지는 여기서 바꿔야할 것 같습니다.
        var imageSrc =
            "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png", // 마커 이미지 url, 스프라이트 이미지를 씁니다
          imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기
          imgOptions = {
            spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기
            spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
            offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표
          },
          markerImage = new kakao.maps.MarkerImage(
            imageSrc,
            imageSize,
            imgOptions
          ),
          marker = new kakao.maps.Marker({
            position: position, // 마커의 위치
            image: markerImage,
          });

        marker.setMap(map); // 지도 위에 마커를 표출합니다
        markers.push(marker); // 배열에 생성된 마커를 추가합니다

        return marker;
      }

      // 지도 위에 표시되고 있는 마커를 모두 제거합니다
      function removeMarker() {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
        markers = [];
      }

      // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다
      function displayPlaceInfo(place) {
        var content =
          '<div class="placeinfo">' +
          '<a class="title" href="' +
          place.place_url +
          '" target="_blank" title="' +
          place.place_name +
          '">' +
          place.place_name +
          "</a>";

        if (place.road_address_name) {
          content +=
            '    <span title="' +
            place.road_address_name +
            '">' +
            place.road_address_name +
            "</span>" +
            '  <span class="jibun" title="' +
            place.address_name +
            '">(지번 : ' +
            place.address_name +
            ")</span>";
        } else {
          content +=
            '    <span title="' +
            place.address_name +
            '">' +
            place.address_name +
            "</span>";
        }

        content +=
          '    <span class="tel">' +
          place.phone +
          "</span>" +
          "</div>" +
          '<div class="after"></div>';

        contentNode.innerHTML = content;
        placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));
        placeOverlay.setMap(map);
      }

      // 각 카테고리에 클릭 이벤트를 등록합니다
      function addCategoryClickEvent() {
        var category = document.getElementById("category"),
          children = category.children;

        for (var i = 0; i < children.length; i++) {
          children[i].onclick = onClickCategory;
        }
      }

      // 카테고리를 클릭했을 때 호출되는 함수입니다
      function onClickCategory() {
        var id = this.id,
          className = this.className;

        placeOverlay.setMap(null);

        if (className === "on") {
          currCategory = "";
          changeCategoryClass();
          removeMarker();
        } else {
          currCategory = id;
          changeCategoryClass(this);
          searchPlaces();
        }
      }

      // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다
      function changeCategoryClass(el) {
        var category = document.getElementById("category"),
          children = category.children,
          i;

        for (i = 0; i < children.length; i++) {
          children[i].className = "";
        }

        if (el) {
          el.className = "on";
        }
      }
    </script>
  </body>
</html>
