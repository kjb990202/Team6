<!DOCTYPE html>
<html lang="ko" class="h-100" data-bs-theme="auto">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta
      name="author"
      content="Mark Otto, Jacob Thornton, and Bootstrap contributors"
    />
    <meta name="generator" content="Hugo 0.118.2" />
    <title>SeSAC-it</title>
    <!-- jQuerly -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 부트스트랩 -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />

    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.3/examples/cover/"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@docsearch/css@3"
    />

    <!-- Custom styles for this template -->
    <link href="../static/css/board.css" rel="stylesheet" />
  </head>
  <body class="d-flex h-100 text-center text-bg-white">
    <!-- 상단  -->
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
      <header class="mb-auto">
        <div>
          <a href="/">
            <h3 class="float-md-start mb-0">SeSAC-it</h3>
          </a>
          <nav class="nav nav-masthead justify-content-center float-md-end">
            <a class="nav-link fw-bold py-1 px-0" href=" /mapMain">맛집 지도</a>
            <a class="nav-link fw-bold py-1 px-0 active" href="/boardMain"
              >게시판</a
            >
            <a class="nav-link fw-bold py-1 px-0" href="/signin">로그인</a>
          </nav>
        </div>
      </header>

      <main class="px-3">
        <button type="button" onclick="location.href='/boardEdit'" >작성하기</button>
      
        <ul class="board-list">
          <!-- 테스트 나중에 db에서 데이터를 가져와야함 -->
        </ul>

      </main>

      <footer class="mt-auto text-white-50">
        <p>SeSAC 용산2기 풀스텍 웹개발자 양성과정 @내 통장에 6조</p>
        <!--JW: 삭제하거나 바닥으로 따라가게 만들어야 할것같습니다 -->
      </footer>
      <script>
        //요소 생성
        const boardList = document.querySelector('.board-list');//보드를 담을 리스트
        const boards = document.querySelectorAll('.nowBox-list');//현재 출력되고있는 보드를 담을 리스트
        function getBoard(cursor) {
          axios({
            method: "get",
            url: "/getBoard",
            params: {
              cursor: cursor,
            },
          })
            .then(function (res) {
              console.log("얻은데이터:", res.data);
              console.log("새로받은 데이터 개수:", res.data.length);

              const boardList = document.querySelector('.board-list');

              res.data.forEach((boardData) => {
                const newBoard = document.createElement('li');
                newBoard.className = 'nowBox-list';

                newBoard.innerHTML = `
                  <div class="title">제목: ${boardData.title}</div>
                  <div class="category">카테고리: ${boardData.category}</div>
                  <div class="content">${boardData.content}</div>
                  <div class="views">조회수: ${boardData.views}</div>
                  <div class="createBoard">작성일: ${boardData.createBoard}</div>
                  <div class="modifiedBoard">수정일: ${boardData.modifiedBoard}</div>
                `;

                boardList.appendChild(newBoard);
              });

              // 마지막 데이터의 boardID를 기준으로 cursor 설정
              if (res.data.length > 0) {
                cursor = res.data[res.data.length - 1].boardID;
                console.log("Updated cursor:", cursor);
                observeLastBoard(io, document.querySelectorAll(".nowBox-list"));
              }
            })
            .catch(function (error) {
              console.error("보드 데이터를 불러오는데 실패했습니다", error);
            });
        }
        //-------------------------------------------------------------------------------------------------------
        let cursor =null;
        getBoard(cursor);
        function addBoard(){
         getBoard(cursor);

        }
        
        function callback(entries, observer) {
              entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                  observer.unobserve(entry.target);

                  addBoard();
                  // 새로 생성된 nowBox-list를 감시
                  observeLastBoard(observer, document.querySelectorAll(".nowBox-list"));
                }
              });
        }


        function observeLastBoard(io, boards){
          if (boards.length > 0) {
            const lastBoard = boards[boards.length - 1];
            io.observe(lastBoard);
          }
        }
  
  
  
        //-----------관찰하는 시점을 바꿔야함.(맨아래 보다 위로 올리기)
        //관찰자 객체 생성
        const io = new IntersectionObserver(callback, {threshold:0.7});
        //관찰대상이 70퍼센트이상 들어오면 callback 함수 실행
        //io는 특정 요소가 어디에 위치하는지 판별하는 객체.
        // observeLastBoard(io, boards);
        
      </script>
    </div>
  </body>
</html>