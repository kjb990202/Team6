<!DOCTYPE html>
<html lang="ko" class="h-100" data-bs-theme="auto">
  <!DOCTYPE html>
  <html lang="ko" class="h-100" data-bs-theme="auto">
    <head>
      <!-- CDN들 불러오기 -->
      <%- include('../components/cdn.ejs') %>
      <!-- CSS 연결 -->
      <link href="../static/css/board.css" rel="stylesheet" />
      <title>게시판</title>
    </head>
    <body class="d-flex h-100 text-center text-bg-white">
      <!-- 헤더 : 상단 메뉴바  -->
      <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
        <header class="container">
          <div><%- include('../components/header.ejs') %></div>
        </header>
        <main class="px-3">
          <ul class="board-list">
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <li class="nowBox-list">
              <div></div>
            </li>
            <!-- 테스트 나중에 db에서 데이터를 가져와야함 -->
          </ul>
        </main>

        <footer class="mt-auto text-white-50">
          <p>SeSAC 용산2기 풀스텍 웹개발자 양성과정 @내 통장에 6조</p>
        </footer>
        <script>
          //요소 생성
          const boardList = document.querySelector(".board-list"); //보드를 담을 리스트
          const boards = document.querySelectorAll(".nowBox-list"); //현재 출력되고있는 보드를 담을 리스트

          function addBoard() {
            boards.forEach((board) =>
              boardList.appendChild(board.cloneNode(true))
            ); //배열 순회(임시)

            //버튼을 누르면 div 박스+내용을 서버에서 가져와 생성(9개)
            //내용을 다 가져온다음 표시만 3줄을 표시할것인지 데이터를 가져올때부터 3줄만 가져올것인지 효율따져보기
            //누르면 내용 9개만 가져온다. 한번더 누르면 그 다음 9개를 가져온다. 만약 남은 컨텐츠의 개수가 9개이하일경우 남은 개수만 가져온다.
          }
          function callback(entries, boards) {
            entries.forEach(function (entry) {
              if (entry.isIntersecting) {
                io.unobserve(entry.target);
                setTimeout(function () {
                  addBoard();
                  observeLastBoard(
                    io,
                    document.querySelectorAll(".nowBox-list")
                  );
                }, 1000); //비동기 통신 따라한것
              }
            });
          }
          function observeLastBoard(io, boards) {
            const lastBoard = boards[boards.length - 1];
            io.observe(lastBoard);
          }

          //-----------관찰하는 시점을 바꿔야함.(맨아래 보다 위로 올리기)
          //관찰자 객체 생성
          const io = new IntersectionObserver(callback, { threshold: 0.9 });
          //관찰대상이 70퍼센트이상 들어오면 callback 함수 실행
          //io는 특정 요소가 어디에 위치하는지 판별하는 객체.
          observeLastBoard(io, boards);
        </script>
      </div>
    </body>
  </html>
</html>
