<!doctype html>
<html lang="ko" class="h-100" data-bs-theme="auto">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.118.2">
    <title>SeSAC-it</title>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="canonical" href="https://getbootstrap.com/docs/5.3/examples/cover/">
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@docsearch/css@3"> -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!-- Custom styles for this template -->
    <link href="../static/css/board_del.css" rel="stylesheet">
    <link href="../static/css/board_update.css" rel="stylesheet">
  </head>
  <body class="d-flex h-100 text-center text-bg-white">
   

    <!-- 상단  -->
   
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
      <header class="mb-auto">
        <div>
          <a href="/">
            <h3 class="float-md-start mb-0">SeSAC-it</h3>
          </a>
          <nav class="nav nav-masthead justify-content-center float-md-end">
            <a class="nav-link fw-bold py-1 px-0" href=" /map">맛집 지도</a>
            <a class="nav-link fw-bold py-1 px-0 active" href="/board">게시판</a>
            <a class="nav-link fw-bold py-1 px-0" href="/signin">로그인</a>
          </nav>
        </div>
      </header>

      <main class="px-3">
       
        
        
        <ul class="board-list">
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <li class="nowBox-list">
            <div></div>
          </li>
          <!-- 테스트 나중에 db에서 데이터를 가져와야함 -->
        </ul>


      </main>

      <footer class="mt-auto text-white-50">
        <p>SeSAC 용산2기 풀스텍 웹개발자 양성과정 @내 통장에 6조</p>
      </footer>
    </div>
    <script>
      //요소 생성
      const boardList = document.querySelector('.board-list');//보드를 담을 리스트
      const boards = document.querySelectorAll('.nowBox-list');//현재 출력되고있는 보드를 담을 리스트

      function addBoard(){
        boards.forEach((board) => boardList.appendChild(board.cloneNode(true)));//배열 순회(임시)

        //버튼을 누르면 div 박스+내용을 서버에서 가져와 생성(9개)
        //내용을 다 가져온다음 표시만 3줄을 표시할것인지 데이터를 가져올때부터 3줄만 가져올것인지 효율따져보기
        //누르면 내용 9개만 가져온다. 한번더 누르면 그 다음 9개를 가져온다. 만약 남은 컨텐츠의 개수가 9개이하일경우 남은 개수만 가져온다.
        

      }
      function callback(entries,boards){
        entries.forEach(function(entry){
          if(entry.isIntersecting){
            io.unobserve(entry.target);
            setTimeout(function(){
              addBoard();
              observeLastBoard(io,document.querySelectorAll(".nowBox-list"));

            },1000);//비동기 통신 따라한것
          }
        });
        
      }
      function observeLastBoard(io, boards){
        const lastBoard = boards[boards.length - 1];
        io.observe(lastBoard);
      }



      //-----------관찰하는 시점을 바꿔야함.(맨아래 보다 위로 올리기)
      //관찰자 객체 생성
      const io = new IntersectionObserver(callback, {threshold:0.7});
      //관찰대상이 70퍼센트이상 들어오면 callback 함수 실행
      //io는 특정 요소가 어디에 위치하는지 판별하는 객체.
      observeLastBoard(io, boards);
    </script>
  </body>
</html>